// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	machineconfigurationv1 "github.com/openshift/api/machineconfiguration/v1"
	applyconfigurationsmachineconfigurationv1 "github.com/openshift/client-go/machineconfiguration/applyconfigurations/machineconfiguration/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMachineConfigs implements MachineConfigInterface
type FakeMachineConfigs struct {
	Fake *FakeMachineconfigurationV1
}

var machineconfigsResource = schema.GroupVersionResource{Group: "machineconfiguration.openshift.io", Version: "v1", Resource: "machineconfigs"}

var machineconfigsKind = schema.GroupVersionKind{Group: "machineconfiguration.openshift.io", Version: "v1", Kind: "MachineConfig"}

// Get takes name of the machineConfig, and returns the corresponding machineConfig object, and an error if there is any.
func (c *FakeMachineConfigs) Get(ctx context.Context, name string, options v1.GetOptions) (result *machineconfigurationv1.MachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(machineconfigsResource, name), &machineconfigurationv1.MachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationv1.MachineConfig), err
}

// List takes label and field selectors, and returns the list of MachineConfigs that match those selectors.
func (c *FakeMachineConfigs) List(ctx context.Context, opts v1.ListOptions) (result *machineconfigurationv1.MachineConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(machineconfigsResource, machineconfigsKind, opts), &machineconfigurationv1.MachineConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &machineconfigurationv1.MachineConfigList{ListMeta: obj.(*machineconfigurationv1.MachineConfigList).ListMeta}
	for _, item := range obj.(*machineconfigurationv1.MachineConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested machineConfigs.
func (c *FakeMachineConfigs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(machineconfigsResource, opts))
}

// Create takes the representation of a machineConfig and creates it.  Returns the server's representation of the machineConfig, and an error, if there is any.
func (c *FakeMachineConfigs) Create(ctx context.Context, machineConfig *machineconfigurationv1.MachineConfig, opts v1.CreateOptions) (result *machineconfigurationv1.MachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(machineconfigsResource, machineConfig), &machineconfigurationv1.MachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationv1.MachineConfig), err
}

// Update takes the representation of a machineConfig and updates it. Returns the server's representation of the machineConfig, and an error, if there is any.
func (c *FakeMachineConfigs) Update(ctx context.Context, machineConfig *machineconfigurationv1.MachineConfig, opts v1.UpdateOptions) (result *machineconfigurationv1.MachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(machineconfigsResource, machineConfig), &machineconfigurationv1.MachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationv1.MachineConfig), err
}

// Delete takes name of the machineConfig and deletes it. Returns an error if one occurs.
func (c *FakeMachineConfigs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(machineconfigsResource, name, opts), &machineconfigurationv1.MachineConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMachineConfigs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(machineconfigsResource, listOpts)

	_, err := c.Fake.Invokes(action, &machineconfigurationv1.MachineConfigList{})
	return err
}

// Patch applies the patch and returns the patched machineConfig.
func (c *FakeMachineConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *machineconfigurationv1.MachineConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(machineconfigsResource, name, pt, data, subresources...), &machineconfigurationv1.MachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationv1.MachineConfig), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied machineConfig.
func (c *FakeMachineConfigs) Apply(ctx context.Context, machineConfig *applyconfigurationsmachineconfigurationv1.MachineConfigApplyConfiguration, opts v1.ApplyOptions) (result *machineconfigurationv1.MachineConfig, err error) {
	if machineConfig == nil {
		return nil, fmt.Errorf("machineConfig provided to Apply must not be nil")
	}
	data, err := json.Marshal(machineConfig)
	if err != nil {
		return nil, err
	}
	name := machineConfig.Name
	if name == nil {
		return nil, fmt.Errorf("machineConfig.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(machineconfigsResource, *name, types.ApplyPatchType, data), &machineconfigurationv1.MachineConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machineconfigurationv1.MachineConfig), err
}
